"""
This type stub file was generated by pyright.
"""

base_url = ...
def build_url(ticker, start_date=..., end_date=..., interval=...): # -> tuple[Any, dict[str, Any]]:
    ...

def force_float(elt): # -> float:
    ...

def get_data(ticker, start_date=..., end_date=..., index_as_date=..., interval=..., headers=...): # -> DataFrame:
    '''Downloads historical stock price data into a pandas data frame.  Interval
       must be "1d", "1wk", "1mo", or "1m" for daily, weekly, monthly, or minute data.
       Intraday minute data is limited to 7 days.
    
       @param: ticker
       @param: start_date = None
       @param: end_date = None
       @param: index_as_date = True
       @param: interval = "1d"
    '''
    ...

def tickers_sp500(include_company_data=...): # -> DataFrame | list[Any]:
    '''Downloads list of tickers currently listed in the S&P 500 '''
    ...

def tickers_nasdaq(include_company_data=...): # -> DataFrame | list[str]:
    '''Downloads list of tickers currently listed in the NASDAQ'''
    ...

def tickers_other(include_company_data=...): # -> DataFrame | list[str]:
    '''Downloads list of tickers currently listed in the "otherlisted.txt"
       file on "ftp.nasdaqtrader.com" '''
    ...

def tickers_dow(include_company_data=...): # -> DataFrame | list[Any]:
    '''Downloads list of currently traded tickers on the Dow'''
    ...

def tickers_ibovespa(include_company_data=...): # -> DataFrame | list[Any]:
    '''Downloads list of currently traded tickers on the Ibovespa, Brazil'''
    ...

def tickers_nifty50(include_company_data=..., headers=...): # -> DataFrame | list[Any]:
    '''Downloads list of currently traded tickers on the NIFTY 50, India'''
    ...

def tickers_niftybank(): # -> list[str]:
    ''' Currently traded tickers on the NIFTY BANK, India '''
    ...

def tickers_ftse100(include_company_data=...): # -> DataFrame | list[Any]:
    '''Downloads a list of the tickers traded on the FTSE 100 index'''
    ...

def tickers_ftse250(include_company_data=...): # -> DataFrame | list[Any]:
    '''Downloads a list of the tickers traded on the FTSE 250 index'''
    ...

def get_quote_table(ticker, dict_result=..., headers=...): # -> dict[Any, Any]:
    '''Scrapes data elements found on Yahoo Finance's quote page 
       of input ticker
    
       @param: ticker
       @param: dict_result = True
    '''
    ...

def get_stats(ticker, headers=...): # -> DataFrame:
    '''Scrapes information from the statistics tab on Yahoo Finance 
       for an input ticker 
    
       @param: ticker
    '''
    ...

def get_stats_valuation(ticker, headers=...): # -> DataFrame:
    '''Scrapes Valuation Measures table from the statistics tab on Yahoo Finance 
       for an input ticker 
    
       @param: ticker
    '''
    ...

def get_income_statement(ticker, yearly=...): # -> DataFrame:
    '''Scrape income statement from Yahoo Finance for a given ticker
    
       @param: ticker
    '''
    ...

def get_balance_sheet(ticker, yearly=...): # -> DataFrame:
    '''Scrapes balance sheet from Yahoo Finance for an input ticker 
    
       @param: ticker
    '''
    ...

def get_cash_flow(ticker, yearly=...): # -> DataFrame:
    '''Scrapes the cash flow statement from Yahoo Finance for an input ticker 
    
       @param: ticker
    '''
    ...

def get_financials(ticker, yearly=..., quarterly=...): # -> dict[Any, Any]:
    '''Scrapes financials data from Yahoo Finance for an input ticker, including
       balance sheet, cash flow statement, and income statement.  Returns dictionary
       of results.
    
       @param: ticker
       @param: yearly = True
       @param: quarterly = True
    '''
    ...

def get_holders(ticker, headers=...): # -> dict[str, DataFrame]:
    '''Scrapes the Holders page from Yahoo Finance for an input ticker 
    
       @param: ticker
    '''
    ...

def get_analysts_info(ticker, headers=...): # -> dict[str, DataFrame]:
    '''Scrapes the Analysts page from Yahoo Finance for an input ticker 
    
       @param: ticker
    '''
    ...

def get_live_price(ticker): # -> Any:
    '''Gets the live price of input ticker
    
       @param: ticker
    '''
    ...

def get_day_most_active(count: int = ...): # -> DataFrame:
    ...

def get_day_gainers(count: int = ...): # -> DataFrame:
    ...

def get_day_losers(count: int = ...): # -> DataFrame:
    ...

def get_top_crypto(): # -> DataFrame:
    '''Gets the top 100 Cryptocurrencies by Market Cap'''
    ...

def get_dividends(ticker, start_date=..., end_date=..., index_as_date=..., headers=...): # -> DataFrame:
    '''Downloads historical dividend data into a pandas data frame.
    
       @param: ticker
       @param: start_date = None
       @param: end_date = None
       @param: index_as_date = True
    '''
    ...

def get_splits(ticker, start_date=..., end_date=..., index_as_date=..., headers=...): # -> DataFrame:
    '''Downloads historical stock split data into a pandas data frame.
    
       @param: ticker
       @param: start_date = None
       @param: end_date = None
       @param: index_as_date = True
    '''
    ...

def get_earnings(ticker): # -> dict[str, DataFrame]:
    '''Scrapes earnings data from Yahoo Finance for an input ticker 
    
       @param: ticker
    '''
    ...

def get_next_earnings_date(ticker): # -> datetime:
    ...

def get_earnings_history(ticker): # -> Any:
    '''Inputs: @ticker
           Returns the earnings calendar history of the input ticker with 
           EPS actual vs. expected data.'''
    ...

def get_earnings_for_date(date, offset=..., count=...): # -> list[Any]:
    '''Inputs: @date
       Returns a dictionary of stock tickers with earnings expected on the
       input date.  The dictionary contains the expected EPS values for each
       stock if available.'''
    ...

def get_earnings_in_date_range(start_date, end_date): # -> Any | list[Any]:
    '''Inputs: @start_date
                   @end_date
                   
           Returns the stock tickers with expected EPS data for all dates in the
           input range (inclusive of the start_date and end_date.'''
    ...

def get_currencies(headers=...): # -> DataFrame:
    '''Returns the currencies table from Yahoo Finance'''
    ...

def get_futures(headers=...): # -> DataFrame:
    '''Returns the futures table from Yahoo Finance'''
    ...

def get_undervalued_large_caps(headers=...): # -> DataFrame:
    '''Returns the undervalued large caps table from Yahoo Finance'''
    ...

def get_quote_data(ticker, headers=...): # -> Any:
    '''Inputs: @ticker
    
       Returns a dictionary containing over 70 elements corresponding to the 
       input ticker, including company name, book value, moving average data,
       pre-market / post-market price (when applicable), and more.'''
    ...

def get_market_status(): # -> Any:
    '''Returns the current state of the market - PRE, POST, OPEN, or CLOSED'''
    ...

def get_premarket_price(ticker): # -> Any:
    '''Inputs: @ticker
    
       Returns the current pre-market price of the input ticker
       (returns value if pre-market price is available.'''
    ...

def get_postmarket_price(ticker): # -> Any:
    '''Inputs: @ticker
    
       Returns the current post-market price of the input ticker
       (returns value if pre-market price is available.'''
    ...

def get_company_info(ticker): # -> DataFrame:
    '''Scrape the company information for a ticker

       @param: ticker
    '''
    ...

def get_company_officers(ticker): # -> DataFrame:
    '''Scrape the company information and return a table of the officers

       @param: ticker
    '''
    ...

